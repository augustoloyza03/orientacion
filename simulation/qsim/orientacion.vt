// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2024 17:34:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ubicacion
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ubicacion_vlg_sample_tst(
	clock,
	Gder,
	Gizq,
	reset,
	S,
	sampler_tx
);
input  clock;
input  Gder;
input  Gizq;
input  reset;
input  S;
output sampler_tx;

reg sample;
time current_time;
always @(clock or Gder or Gizq or reset or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ubicacion_vlg_check_tst (
	o0,
	o1,
	p0,
	p1,
	p2,
	p3,
	sampler_rx
);
input  o0;
input  o1;
input  p0;
input  p1;
input  p2;
input  p3;
input sampler_rx;

reg  o0_expected;
reg  o1_expected;
reg  p0_expected;
reg  p1_expected;
reg  p2_expected;
reg  p3_expected;

reg  o0_prev;
reg  o1_prev;
reg  p0_prev;
reg  p1_prev;
reg  p2_prev;
reg  p3_prev;

reg  o0_expected_prev;
reg  o1_expected_prev;
reg  p0_expected_prev;
reg  p1_expected_prev;
reg  p2_expected_prev;
reg  p3_expected_prev;

reg  last_o0_exp;
reg  last_o1_exp;
reg  last_p0_exp;
reg  last_p1_exp;
reg  last_p2_exp;
reg  last_p3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	o0_prev = o0;
	o1_prev = o1;
	p0_prev = p0;
	p1_prev = p1;
	p2_prev = p2;
	p3_prev = p3;
end

// update expected /o prevs

always @(trigger)
begin
	o0_expected_prev = o0_expected;
	o1_expected_prev = o1_expected;
	p0_expected_prev = p0_expected;
	p1_expected_prev = p1_expected;
	p2_expected_prev = p2_expected;
	p3_expected_prev = p3_expected;
end



// expected o0
initial
begin
	o0_expected = 1'bX;
end 

// expected o1
initial
begin
	o1_expected = 1'bX;
end 

// expected p0
initial
begin
	p0_expected = 1'bX;
end 

// expected p1
initial
begin
	p1_expected = 1'bX;
end 

// expected p2
initial
begin
	p2_expected = 1'bX;
end 

// expected p3
initial
begin
	p3_expected = 1'bX;
end 
// generate trigger
always @(o0_expected or o0 or o1_expected or o1 or p0_expected or p0 or p1_expected or p1 or p2_expected or p2 or p3_expected or p3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o0 = %b | expected o1 = %b | expected p0 = %b | expected p1 = %b | expected p2 = %b | expected p3 = %b | ",o0_expected_prev,o1_expected_prev,p0_expected_prev,p1_expected_prev,p2_expected_prev,p3_expected_prev);
	$display("| real o0 = %b | real o1 = %b | real p0 = %b | real p1 = %b | real p2 = %b | real p3 = %b | ",o0_prev,o1_prev,p0_prev,p1_prev,p2_prev,p3_prev);
`endif
	if (
		( o0_expected_prev !== 1'bx ) && ( o0_prev !== o0_expected_prev )
		&& ((o0_expected_prev !== last_o0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o0_expected_prev);
		$display ("     Real value = %b", o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o0_exp = o0_expected_prev;
	end
	if (
		( o1_expected_prev !== 1'bx ) && ( o1_prev !== o1_expected_prev )
		&& ((o1_expected_prev !== last_o1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o1_exp = o1_expected_prev;
	end
	if (
		( p0_expected_prev !== 1'bx ) && ( p0_prev !== p0_expected_prev )
		&& ((p0_expected_prev !== last_p0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p0_expected_prev);
		$display ("     Real value = %b", p0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p0_exp = p0_expected_prev;
	end
	if (
		( p1_expected_prev !== 1'bx ) && ( p1_prev !== p1_expected_prev )
		&& ((p1_expected_prev !== last_p1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p1_exp = p1_expected_prev;
	end
	if (
		( p2_expected_prev !== 1'bx ) && ( p2_prev !== p2_expected_prev )
		&& ((p2_expected_prev !== last_p2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p2_exp = p2_expected_prev;
	end
	if (
		( p3_expected_prev !== 1'bx ) && ( p3_prev !== p3_expected_prev )
		&& ((p3_expected_prev !== last_p3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p3_exp = p3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ubicacion_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg Gder;
reg Gizq;
reg reset;
reg S;
// wires                                               
wire o0;
wire o1;
wire p0;
wire p1;
wire p2;
wire p3;

wire sampler;                             

// assign statements (if any)                          
ubicacion i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.Gder(Gder),
	.Gizq(Gizq),
	.o0(o0),
	.o1(o1),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.reset(reset),
	.S(S)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// Gder
initial
begin
	Gder = 1'b0;
	Gder = #350000 1'b1;
	Gder = #100000 1'b0;
end 

// Gizq
initial
begin
	Gizq = 1'b0;
	Gizq = #150000 1'b1;
	Gizq = #100000 1'b0;
end 

// S
initial
begin
	S = 1'b0;
	S = #120000 1'b1;
	S = #10000 1'b0;
	S = #190000 1'b1;
	S = #10000 1'b0;
	S = #110000 1'b1;
	S = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
end 

ubicacion_vlg_sample_tst tb_sample (
	.clock(clock),
	.Gder(Gder),
	.Gizq(Gizq),
	.reset(reset),
	.S(S),
	.sampler_tx(sampler)
);

ubicacion_vlg_check_tst tb_out(
	.o0(o0),
	.o1(o1),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.sampler_rx(sampler)
);
endmodule

